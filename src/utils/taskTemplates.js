export const HTTP = {
  name: "http",
  taskReferenceName: "http_0",
  description: null,
  inputParameters: {
    http_request: {
      method: "GET",
      uri: "https://orkes-api-tester.orkesconductor.com/get",
    },
  },
  type: "HTTP",
  dynamicTaskNameParam: null,
  caseValueParam: null,
  caseExpression: null,
  scriptExpression: null,
  dynamicForkJoinTasksParam: null,
  dynamicForkTasksParam: null,
  dynamicForkTasksInputParamName: null,
  startDelay: 0,
  subWorkflowParam: null,
  sink: null,
  optional: false,
  taskDefinition: null,
  rateLimited: null,
  asyncComplete: false,
  loopCondition: null,
  retryCount: null,
  evaluatorType: null,
  expression: null,
};

export const SIMPLE = {
  name: "simple",
  taskReferenceName: "simple_0",
  description: null,
  inputParameters: {
    http_request: {
      method: "",
      uri: "",
    },
  },
  type: "SIMPLE",
  dynamicTaskNameParam: null,
  caseValueParam: null,
  caseExpression: null,
  scriptExpression: null,
  dynamicForkJoinTasksParam: null,
  dynamicForkTasksParam: null,
  dynamicForkTasksInputParamName: null,
  startDelay: 0,
  subWorkflowParam: null,
  sink: null,
  optional: false,
  taskDefinition: null,
  rateLimited: null,
  asyncComplete: false,
  loopCondition: null,
  retryCount: null,
  evaluatorType: null,
  expression: null,
};

export const INLINE = {
  name: "inline",
  taskReferenceName: "inline_ref",
  inputParameters: {
    expression: "(function () {\n  return $.value1 + $.value2;\n})();",
    evaluatorType: "graaljs",
    value1: 1,
    value2: 2,
  },
  type: "INLINE",
  decisionCases: {},
  defaultCase: [],
  forkTasks: [],
  startDelay: 0,
  joinOn: [],
  optional: false,
  defaultExclusiveJoinTask: [],
  asyncComplete: false,
  loopOver: [],
  onStateChange: {},
  permissive: false,
};

export const getDefaultWorkflow = () => ({
  ownerApp: null,
  createTime: Date.now(),
  updateTime: null,
  createdBy: null,
  updatedBy: null,
  accessPolicy: {},
  name: "",
  description: "",
  version: 1,
  tasks: [],
  inputParameters: [],
  outputParameters: {},
  failureWorkflow: null,
  schemaVersion: 2,
  restartable: true,
  workflowStatusListenerEnabled: false,
  ownerEmail: "",
  timeoutPolicy: "ALERT_ONLY",
  timeoutSeconds: 0,
  variables: {},
  inputTemplate: {},
});
